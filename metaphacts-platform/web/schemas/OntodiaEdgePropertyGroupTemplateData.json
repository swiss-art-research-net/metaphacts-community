{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "BNode": {
            "properties": {
                "termType": {
                    "description": "Contains the constant \"BlankNode\".",
                    "enum": [
                        "BlankNode"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "Blank node name as a string, without any serialization specific prefixes,\ne.g. when parsing,\nif the data was sourced from Turtle, remove _:,\nif it was sourced from RDF/XML, do not change the blank node name (example: blank3).",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "equals",
                "hashCode",
                "toString",
                "toJSON"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        },
        "Iri<string>": {
            "properties": {
                "termType": {
                    "description": "Contains the constant \"NamedNode\".",
                    "enum": [
                        "NamedNode"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "The IRI of the named node (example: `http://example.org/resource`)",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "equals",
                "hashCode",
                "toString",
                "toJSON"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        },
        "Literal": {
            "properties": {
                "datatype": {
                    "$ref": "#/definitions/NamedNode<string>",
                    "description": "A NamedNode whose IRI represents the datatype of the literal."
                },
                "language": {
                    "description": "the language as lowercase BCP47 string (examples: en, en-gb)\nor an empty string if the literal has no language.",
                    "type": "string"
                },
                "termType": {
                    "description": "Contains the constant \"Literal\".",
                    "enum": [
                        "Literal"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "The text value, unescaped, without language or type (example: Brad Pitt).",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "language",
                "datatype",
                "equals",
                "hashCode",
                "toString",
                "toJSON"
            ],
            "required": [
                "datatype",
                "language",
                "termType",
                "value"
            ],
            "type": "object"
        },
        "NamedNode<string>": {
            "description": "Contains an IRI.",
            "properties": {
                "termType": {
                    "description": "Contains the constant \"NamedNode\".",
                    "enum": [
                        "NamedNode"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "The IRI of the named node (example: `http://example.org/resource`)",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "equals"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        }
    },
    "properties": {
        "properties": {
            "items": {
                "properties": {
                    "label": {
                        "type": "string"
                    },
                    "typeIri": {
                        "type": "string"
                    }
                },
                "propertyOrder": [
                    "typeIri",
                    "label"
                ],
                "required": [
                    "label",
                    "typeIri"
                ],
                "type": "object"
            },
            "type": "array"
        },
        "values": {
            "additionalProperties": {
                "items": {
                    "properties": {
                        "label": {
                            "type": "string"
                        },
                        "term": {
                            "anyOf": [
                                {
                                    "$ref": "#/definitions/Literal"
                                },
                                {
                                    "$ref": "#/definitions/BNode"
                                },
                                {
                                    "$ref": "#/definitions/Iri<string>"
                                }
                            ]
                        }
                    },
                    "propertyOrder": [
                        "term",
                        "label"
                    ],
                    "required": [
                        "label",
                        "term"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "propertyOrder": [
            ],
            "type": "object"
        }
    },
    "propertyOrder": [
        "properties",
        "values"
    ],
    "required": [
        "properties",
        "values"
    ],
    "type": "object"
}

