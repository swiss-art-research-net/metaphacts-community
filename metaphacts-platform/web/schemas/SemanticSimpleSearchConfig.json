{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "BindSparqlParam": {
            "description": "Defines a binding input parameters, tells if the parameter is optional or not and what datatype the parameter should have.",
            "properties": {
                "datatype": {
                    "description": "Defines xsd datatype of the parameter",
                    "type": "string"
                },
                "required": {
                    "description": "Tells whether the token is required parameter or not",
                    "type": "boolean"
                },
                "type": {
                    "description": "Defines the type of parameter",
                    "enum": [
                        "bind"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "required",
                "datatype"
            ],
            "required": [
                "type"
            ],
            "type": "object"
        },
        "LookupDataQuery": {
            "description": "Queries of this type are processed using Reconciliation Service.",
            "properties": {
                "defaultTerm": {
                    "description": "Provides a default query term for the case when keyword is not provided via arguments",
                    "type": "string"
                },
                "entityType": {
                    "description": "Filter result by specified entityType. See documentation for Reconciliation API.",
                    "type": "string"
                },
                "limit": {
                    "description": "Tells for how much results we are looking for",
                    "type": "number"
                },
                "type": {
                    "description": "Type of the query. Should be always \"<b>lookup</b>\" in order to be of a type LookupDataQuery",
                    "enum": [
                        "lookup"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "defaultTerm",
                "limit",
                "entityType"
            ],
            "required": [
                "type"
            ],
            "type": "object"
        },
        "SparqlDataQuery": {
            "description": "Queries of this types are processed using SparqlClient the same way as ordinary SPARQL queries.",
            "properties": {
                "params": {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/BindSparqlParam"
                            },
                            {
                                "$ref": "#/definitions/TokenSparqlParam"
                            }
                        ]
                    },
                    "description": "Dictionary of input parameters where for each defined input variable there is a corresponding definition.\nThe definition can be one of two types <code>TokenSparqlParam</code> or <code>BindSparqlParam</code>.",
                    "propertyOrder": [
                    ],
                    "type": "object"
                },
                "query": {
                    "description": "SPARQL <b>SELECT</b> query",
                    "type": "string"
                },
                "type": {
                    "description": "Type of the query. Should be always \"<b>sparql</b>\" in order to be of a type SparqlQuery",
                    "enum": [
                        "sparql"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "query",
                "params"
            ],
            "required": [
                "query",
                "type"
            ],
            "type": "object"
        },
        "TokenSparqlParam": {
            "description": "Defines a token input parameters and tells whether it should be escaped and tokenized or not.\nAlso here it's possible to specify if the parameter is optional or not.\nIt's expected that token alway of <code>Literal^^xsd:string</code> type.",
            "properties": {
                "escapeLuceneSyntax": {
                    "description": "Tells whether SparqlClient should escape the search string or not.\n\nDeprecated: escaping will be applied automatically based on SPARQL query.",
                    "type": "boolean"
                },
                "required": {
                    "description": "Tells whether the token is required parameter or not",
                    "type": "boolean"
                },
                "tokenizeLuceneQuery": {
                    "description": "Tells whether SparqlClient should tokenize lucene query or not.\n\nDeprecated: tokenization will be applied automatically based on SPARQL query.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Defines the type of parameter",
                    "enum": [
                        "token"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "required",
                "escapeLuceneSyntax",
                "tokenizeLuceneQuery"
            ],
            "required": [
                "type"
            ],
            "type": "object"
        }
    },
    "properties": {
        "defaultQuery": {
            "anyOf": [
                {
                    "$ref": "#/definitions/SparqlDataQuery"
                },
                {
                    "$ref": "#/definitions/LookupDataQuery"
                },
                {
                    "type": "string"
                }
            ],
            "description": "SPARQL SELECT query string or <semantic-link uri='http://help.metaphacts.com/resource/DataClient'>DataClient</semantic-link> query to show default\nsuggestions without the need for the user to type anything if specified."
        },
        "escapeLuceneSyntax": {
            "description": "A flag determining whether any special Lucene syntax will be escaped.\nWhen `false` lucene syntax in the user input is not escaped.\n\nDeprecated: escaping will be applied automatically based on SPARQL query.",
            "type": "boolean"
        },
        "minSearchTermLength": {
            "default": 3,
            "description": "Minimum number of input characters that triggers the search.",
            "type": "number"
        },
        "placeholder": {
            "description": "Input placeholder.",
            "type": "string"
        },
        "query": {
            "anyOf": [
                {
                    "$ref": "#/definitions/SparqlDataQuery"
                },
                {
                    "$ref": "#/definitions/LookupDataQuery"
                },
                {
                    "type": "string"
                }
            ],
            "description": "SPARQL SELECT query string or <semantic-link uri='http://help.metaphacts.com/resource/DataClient'>DataClient</semantic-link> query.\n\nNeeds to have a variable `?__token__` serving as placeholder for the user input.\nNote that the name of this variable can be customized using `searchTermVariable`.\n\nDefault value:\n```\nPREFIX lookup: <http://www.metaphacts.com/ontologies/platform/repository/lookup#>\nSELECT ?resource WHERE {\n    SERVICE Repository:lookup {\n      ?resource lookup:token ?__token__ .\n    }\n}\n```"
        },
        "resourceBindingName": {
            "description": "Name of the binding being used for result.",
            "type": "string"
        },
        "searchTermVariable": {
            "default": "__token__",
            "description": "User input variable name.",
            "type": "string"
        },
        "template": {
            "description": "<semantic-link uri='http://help.metaphacts.com/resource/FrontendTemplating'>Template</semantic-link> for suggestion item.",
            "type": "string"
        },
        "tokenizeLuceneQuery": {
            "description": "A flag determining whether the user input is tokenized by whitespace into\nwords postfixed by `*`.\nE.g. the search for `Hello World` becomes `Hello* World*`.\n\nDeprecated: tokenization will be applied automatically based on SPARQL query.",
            "type": "boolean"
        }
    },
    "propertyOrder": [
        "query",
        "defaultQuery",
        "resourceBindingName",
        "template",
        "searchTermVariable",
        "minSearchTermLength",
        "placeholder",
        "escapeLuceneSyntax",
        "tokenizeLuceneQuery"
    ],
    "type": "object"
}

