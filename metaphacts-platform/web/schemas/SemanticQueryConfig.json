{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "CSSProperties": {
            "type": "string"
        }
    },
    "description": "Component to render SPARQL SELECT results in a fully customizable way using templates.\n\n**Example** (with default template):\n```\n<semantic-query\n   query='\n     SELECT ?person ?name WHERE {}\n   \t VALUES (?person ?name) { (foaf:Joe \"Joe\") (foaf:Mike \"Mike\") }\n   '>\n</semantic-query>\n```\n\n**Example** (with custom template):\n```\n<semantic-query\n   query='\n     SELECT ?person ?name WHERE {}\n     VALUES (?person ?name) { (foaf:Joe \"Joe\") (foaf:Mike \"Mike\") }\n   '>\n   template='{{> results}}'>\n   <template id='results'>\n     <ul>\n       {{#each bindings}}\n       <li><semantic-link iri='{{person.value}}'>{{name.value}}</semantic-link></li>\n       {{/each}}\n     </ul>\n   </template>\n</semantic-query>\n```",
    "properties": {
        "className": {
            "description": "CSS classes for component holder element.\n\nNote that if the template does not have a single HTML root element,\nthe CSS class is not applied.",
            "type": "string"
        },
        "noResultTemplate": {
            "description": "Template which is applied when query returns no results.",
            "mpSeeResource": {
                "iri": "http://help.metaphacts.com/resource/FrontendTemplating",
                "name": "Client-side templating"
            },
            "type": "string"
        },
        "query": {
            "description": "SPARQL SELECT query string.",
            "type": "string"
        },
        "style": {
            "$ref": "#/definitions/CSSProperties",
            "description": "CSS styles for component holder element.\n\nNote that if the template does not have a single HTML root element,\nthe CSS styles are not applied."
        },
        "template": {
            "description": "Template that gets a [bindings](https://www.w3.org/TR/sparql11-results-json/#select-results)\nobject injected as template context i.e. the result binding to iterate over.\n\n[each helper](http://handlebarsjs.com/builtin_helpers.html#iteration) can be used to iterate\nover the bindings.\n\nThe template will only be rendered if and only if the result is not empty, so that one\ndoes not need to have additional if expressions around the component in order to hide it,\nfor example, a list header if actually no result are to be displayed.\n\n**Example:** `My Result: {{#each bindings}}{{bindingName.value}}{{/each}}`\n\n**Default:** If no template is provided, all tuples for the first projection variable will be\nrendered as a comma-separated list of semantic-link (if IRI) or plain text items.",
            "mpSeeResource": {
                "iri": "http://help.metaphacts.com/resource/FrontendTemplating",
                "name": "Client-side templating"
            },
            "type": "string"
        }
    },
    "propertyOrder": [
        "query",
        "template",
        "noResultTemplate",
        "className",
        "style"
    ],
    "required": [
        "query"
    ],
    "type": "object"
}

