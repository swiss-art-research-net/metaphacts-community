{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "BNode": {
            "properties": {
                "termType": {
                    "description": "Contains the constant \"BlankNode\".",
                    "enum": [
                        "BlankNode"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "Blank node name as a string, without any serialization specific prefixes,\ne.g. when parsing,\nif the data was sourced from Turtle, remove _:,\nif it was sourced from RDF/XML, do not change the blank node name (example: blank3).",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "equals",
                "hashCode",
                "toString",
                "toJSON"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        },
        "DefaultGraph": {
            "properties": {
                "termType": {
                    "description": "Contains the constant \"DefaultGraph\".",
                    "enum": [
                        "DefaultGraph"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "Contains an empty string as constant value.",
                    "enum": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "equals",
                "hashCode",
                "toString",
                "toJSON"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        },
        "Iri<string>": {
            "properties": {
                "termType": {
                    "description": "Contains the constant \"NamedNode\".",
                    "enum": [
                        "NamedNode"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "The IRI of the named node (example: `http://example.org/resource`)",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "equals",
                "hashCode",
                "toString",
                "toJSON"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        },
        "Iri<string>_1": {
            "properties": {
                "termType": {
                    "description": "Contains the constant \"NamedNode\".",
                    "enum": [
                        "NamedNode"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "The IRI of the named node (example: `http://example.org/resource`)",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "equals",
                "hashCode",
                "toString",
                "toJSON"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        },
        "Literal": {
            "properties": {
                "datatype": {
                    "$ref": "#/definitions/NamedNode<string>",
                    "description": "A NamedNode whose IRI represents the datatype of the literal."
                },
                "language": {
                    "description": "the language as lowercase BCP47 string (examples: en, en-gb)\nor an empty string if the literal has no language.",
                    "type": "string"
                },
                "termType": {
                    "description": "Contains the constant \"Literal\".",
                    "enum": [
                        "Literal"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "The text value, unescaped, without language or type (example: Brad Pitt).",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "language",
                "datatype",
                "equals",
                "hashCode",
                "toString",
                "toJSON"
            ],
            "required": [
                "datatype",
                "language",
                "termType",
                "value"
            ],
            "type": "object"
        },
        "NamedNode<string>": {
            "description": "Contains an IRI.",
            "properties": {
                "termType": {
                    "description": "Contains the constant \"NamedNode\".",
                    "enum": [
                        "NamedNode"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "The IRI of the named node (example: `http://example.org/resource`)",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "equals"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        },
        "Quad": {
            "properties": {
                "graph": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BNode"
                        },
                        {
                            "$ref": "#/definitions/Variable"
                        },
                        {
                            "$ref": "#/definitions/DefaultGraph"
                        },
                        {
                            "$ref": "#/definitions/Iri<string>"
                        }
                    ],
                    "description": "The named graph."
                },
                "o": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Literal"
                        },
                        {
                            "$ref": "#/definitions/BNode"
                        },
                        {
                            "$ref": "#/definitions/Variable"
                        },
                        {
                            "$ref": "#/definitions/Quad"
                        },
                        {
                            "$ref": "#/definitions/Iri<string>"
                        }
                    ],
                    "description": "Alias for `Quad.object`"
                },
                "object": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Literal"
                        },
                        {
                            "$ref": "#/definitions/BNode"
                        },
                        {
                            "$ref": "#/definitions/Variable"
                        },
                        {
                            "$ref": "#/definitions/Quad"
                        },
                        {
                            "$ref": "#/definitions/Iri<string>"
                        }
                    ],
                    "description": "The object."
                },
                "p": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Variable"
                        },
                        {
                            "$ref": "#/definitions/Iri<string>"
                        }
                    ],
                    "description": "Alias for `Quad.predicate`"
                },
                "predicate": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Variable"
                        },
                        {
                            "$ref": "#/definitions/Iri<string>"
                        }
                    ],
                    "description": "The predicate."
                },
                "s": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BNode"
                        },
                        {
                            "$ref": "#/definitions/Variable"
                        },
                        {
                            "$ref": "#/definitions/Quad"
                        },
                        {
                            "$ref": "#/definitions/Iri<string>"
                        }
                    ],
                    "description": "Alias for `Quad.subject`"
                },
                "subject": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BNode"
                        },
                        {
                            "$ref": "#/definitions/Variable"
                        },
                        {
                            "$ref": "#/definitions/Quad"
                        },
                        {
                            "$ref": "#/definitions/Iri<string>"
                        }
                    ],
                    "description": "The subject."
                },
                "termType": {
                    "description": "Contains the constant \"Quad\".",
                    "enum": [
                        "Quad"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "Contains an empty string as constant value.",
                    "enum": [
                        ""
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "subject",
                "predicate",
                "object",
                "graph",
                "s",
                "p",
                "o",
                "termType",
                "value",
                "equals",
                "hashCode",
                "toString",
                "toJSON"
            ],
            "required": [
                "graph",
                "o",
                "object",
                "p",
                "predicate",
                "s",
                "subject",
                "termType",
                "value"
            ],
            "type": "object"
        },
        "SemanticQueryBinding": {
            "additionalProperties": {
                "anyOf": [
                    {
                        "$ref": "#/definitions/Literal"
                    },
                    {
                        "$ref": "#/definitions/BNode"
                    },
                    {
                        "$ref": "#/definitions/Quad"
                    },
                    {
                        "$ref": "#/definitions/Iri<string>_1"
                    }
                ]
            },
            "description": "JSON object which maps binding names to RDF terms.",
            "propertyOrder": [
            ],
            "type": "object"
        },
        "Variable": {
            "properties": {
                "termType": {
                    "description": "Contains the constant \"Variable\".",
                    "enum": [
                        "Variable"
                    ],
                    "type": "string"
                },
                "value": {
                    "description": "The name of the variable *without* leading ? (example: a).",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "equals",
                "hashCode",
                "toString",
                "toJSON"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        }
    },
    "properties": {
        "bindings": {
            "items": {
                "$ref": "#/definitions/SemanticQueryBinding"
            },
            "type": "array"
        },
        "distinct": {
            "type": "boolean"
        },
        "ordered": {
            "type": "boolean"
        }
    },
    "propertyOrder": [
        "bindings",
        "distinct",
        "ordered"
    ],
    "required": [
        "bindings",
        "distinct",
        "ordered"
    ],
    "type": "object"
}

