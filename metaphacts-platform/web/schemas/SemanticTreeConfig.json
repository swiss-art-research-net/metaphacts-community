{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
        "D3TreeOptions": {
            "properties": {
                "minHeight": {
                    "default": "'300'",
                    "description": "Numeric minHeight of the entire tree.\nIf the content is larger than the minimum height,\nthe min-height property has no effect.\nBy default the height will be estimated.",
                    "type": "number"
                },
                "nodeHeight": {
                    "default": "'120'",
                    "description": "Numeric height of each node (template) element.",
                    "type": "number"
                },
                "nodeLeftMargin": {
                    "default": "'8'",
                    "description": "Numeric left margin of each node (template) element.",
                    "type": "number"
                },
                "nodeWidth": {
                    "default": "'30'",
                    "description": "Numeric width of each node (template) element.",
                    "type": "number"
                }
            },
            "propertyOrder": [
                "minHeight",
                "nodeWidth",
                "nodeHeight",
                "nodeLeftMargin"
            ],
            "type": "object"
        },
        "SemanticTreeKind": {
            "enum": [
                "d3-collapsible-tree",
                "d3-dendrogram",
                "d3-sankey",
                "html"
            ],
            "type": "string"
        }
    },
    "properties": {
        "collapsed": {
            "default": false,
            "description": "Specifies if tree should be collapsed by default",
            "type": "boolean"
        },
        "d3TreeOptions": {
            "$ref": "#/definitions/D3TreeOptions",
            "description": "Options for D3-based tree to customize, for example, the width of the nodes\nto fit longer labels.\n\nExample:\n```\nd3-tree-options='{\"nodeWidth\":160, \"nodeHeight\":25}'\n```\n**Make sure that numbers aren't quoted in `\"\"`**."
        },
        "id": {
            "description": "ID for issuing component events.",
            "type": "string"
        },
        "keysOpened": {
            "description": "Array of node IRIs that should be opened by default.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "noResultTemplate": {
            "description": "<semantic-link uri='http://help.metaphacts.com/resource/FrontendTemplating'>Template</semantic-link>\nwhich is applied when the query returns no results.\n**The template MUST have a single HTML root element.**",
            "type": "string"
        },
        "nodeBindingName": {
            "default": "'node'",
            "description": "SPARQL Select projection variable name that is used to represent\n**child** value in parent-child relation.",
            "type": "string"
        },
        "parentBindingName": {
            "default": "'parent'",
            "description": "SPARQL Select projection variable name that is used to represent\n**parent** value in parent-child relation",
            "type": "string"
        },
        "provider": {
            "$ref": "#/definitions/SemanticTreeKind",
            "default": "'html'",
            "description": "Determines visual style of the tree. Defaults to HTML rendering if left unspecified."
        },
        "query": {
            "description": "SPARQL Select query. The query should have at least two projection\nvariables -  `node` and `parent` i.e. the tree structure needs to be returned\nas adjacency list of node-parent relations.\nIt is possible to override the expected binding variable names (c.f. options below)\nExample:\n```\nSELECT ?node ?parent WHERE {\n  ?node a owl:Class .\n  OPTIONAL{?node rdfs:subClassOf ?parent }\n}\n```\nDepending on your data, you may need to traverse the graph using **SPARQL\nproperty path operations** (e.g. rdfs:subClassOf+ or rdsf:subClassOf*)\nin order to collect all node-parent relations.\n\nExample:\n```\nSELECT DISTINCT ?node ?parent WHERE {\n   { { ?? rdfs:subClassOf* ?node }\n   UNION\n   { ?node rdfs:subClassOf* ?? } }\n   OPTIONAL { ?node rdfs:subClassOf ?parent. FILTER(ISIRI(?parent)) }\n   FILTER(ISIRI(?node))\n}\n```",
            "type": "string"
        },
        "roots": {
            "description": "List of node IRIs that should be used as root nodes for the tree visualization.\nIf omitted default roots are calculated with the assumption that\nthe node is root if it doesn't have any parent.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "tupleTemplate": {
            "description": "<semantic-link uri='http://help.metaphacts.com/resource/FrontendTemplating'>Template</semantic-link>\nwhich is used to render every tree node. Template has access to all projection\nvariables for a single result tuple.\nBy default `<semantic-link>` component is used for node visualization.\n**The template MUST have a single HTML root element.**",
            "type": "string"
        }
    },
    "propertyOrder": [
        "provider",
        "query",
        "tupleTemplate",
        "noResultTemplate",
        "roots",
        "parentBindingName",
        "nodeBindingName",
        "collapsed",
        "keysOpened",
        "d3TreeOptions",
        "id"
    ],
    "required": [
        "query"
    ],
    "type": "object"
}

