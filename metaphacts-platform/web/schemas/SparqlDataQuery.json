{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "BindSparqlParam": {
            "description": "Defines a binding input parameters, tells if the parameter is optional or not\nand what datatype the parameter should have.",
            "properties": {
                "datatype": {
                    "description": "Defines xsd datatype of the parameter",
                    "type": "string"
                },
                "required": {
                    "description": "Tells whether the token is required parameter or not",
                    "type": "boolean"
                },
                "type": {
                    "description": "Defines the type of parameter",
                    "enum": [
                        "bind"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "required",
                "datatype"
            ],
            "required": [
                "type"
            ],
            "type": "object"
        },
        "TokenSparqlParam": {
            "description": "Defines a token input parameters and tells whether it should be escaped and tokenized or not.\nAlso here it's possible to specify if the parameter is optional or not.\nIt's expected that token is always of `xsd:string` datatype.",
            "properties": {
                "escapeLuceneSyntax": {
                    "description": "Tells whether SparqlClient should escape the search string or not.\n\nDeprecated: escaping will be applied automatically based on SPARQL query.",
                    "type": "boolean"
                },
                "required": {
                    "description": "Tells whether the token is required parameter or not",
                    "type": "boolean"
                },
                "tokenizeLuceneQuery": {
                    "description": "Tells whether SparqlClient should tokenize lucene query or not.\n\nDeprecated: tokenization will be applied automatically based on SPARQL query.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Defines the type of parameter",
                    "enum": [
                        "token"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "required",
                "escapeLuceneSyntax",
                "tokenizeLuceneQuery"
            ],
            "required": [
                "type"
            ],
            "type": "object"
        }
    },
    "description": "Queries of this types are processed using SparqlClient the same way as ordinary SPARQL queries.",
    "properties": {
        "params": {
            "additionalProperties": {
                "anyOf": [
                    {
                        "$ref": "#/definitions/BindSparqlParam"
                    },
                    {
                        "$ref": "#/definitions/TokenSparqlParam"
                    }
                ]
            },
            "description": "Dictionary of input parameters where for each defined input variable\nthere is a corresponding definition.",
            "propertyOrder": [
            ],
            "type": "object"
        },
        "query": {
            "description": "SPARQL SELECT query.",
            "type": "string"
        },
        "type": {
            "description": "Type of the query. Should be always `sparql` in order to be of a type SparqlQuery",
            "enum": [
                "sparql"
            ],
            "type": "string"
        }
    },
    "propertyOrder": [
        "type",
        "query",
        "params"
    ],
    "required": [
        "query",
        "type"
    ],
    "type": "object"
}

