{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "BindSparqlParam": {
            "description": "Defines a binding input parameters, tells if the parameter is optional or not\nand what datatype the parameter should have.",
            "properties": {
                "datatype": {
                    "description": "Defines xsd datatype of the parameter",
                    "type": "string"
                },
                "required": {
                    "description": "Tells whether the token is required parameter or not",
                    "type": "boolean"
                },
                "type": {
                    "description": "Defines the type of parameter",
                    "enum": [
                        "bind"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "required",
                "datatype"
            ],
            "required": [
                "type"
            ],
            "type": "object"
        },
        "CSSProperties": {
            "type": "string"
        },
        "LiteralData": {
            "description": "**Example**\n```\n// \"foo\"^^xsd:string\n{\"termType\": \"Literal\", \"value\": \"foo\"}\n\n// \"bar\"@de (with rdf:langString datatype)\n{\"termType\": \"Literal\", \"value\": \"bar\", \"language\": \"de\"}\n\n// \"42\"^^xsd:integer\n{\n   \"termType\": \"Literal\",\n   \"value\": \"42\",\n   \"datatype\": \"http://www.w3.org/2001/XMLSchema#integer\"\n}\n```",
            "properties": {
                "datatype": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "termType": {
                    "enum": [
                        "Literal"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value",
                "datatype",
                "language"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        },
        "LookupDataQuery": {
            "description": "Queries of this type are processed using Reconciliation Service.",
            "properties": {
                "defaultTerm": {
                    "description": "Provides a default query term for the case when keyword is not provided via arguments",
                    "type": "string"
                },
                "entityType": {
                    "description": "Filter result by specified entityType. See documentation for Reconciliation API.",
                    "type": "string"
                },
                "limit": {
                    "description": "Tells for how much results we are looking for",
                    "type": "number"
                },
                "lookupServiceName": {
                    "description": "Direct query to a specific implementation of the lookup service.\nIf not specified the default lookup service is used.",
                    "type": "string"
                },
                "preferredLanguage": {
                    "description": "Language tag (or comma-separated list of language tags with decreasing order of preference)\nof the preferred language(s) (optional). A language tag consists of the language and\noptionally variant, e.g. `de` or `de-CH`.\nSee <a href=\"https://tools.ietf.org/html/rfc4647\">RFC4647</a> for details.\nExamples: `ru`, `ru,fr-CH,de,en`\nThe default value is the user selected preferred language.\nSo the default language can be changed using dedicated switched in the toolbar\n(if provided more then one preferred language, otherwise the switch is hidden).",
                    "type": "string"
                },
                "type": {
                    "description": "Type of the query. Should be always `lookup` in order to be of a type LookupDataQuery",
                    "enum": [
                        "lookup"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "defaultTerm",
                "limit",
                "entityType",
                "lookupServiceName",
                "preferredLanguage"
            ],
            "required": [
                "type"
            ],
            "type": "object"
        },
        "NamedNodeData": {
            "description": "**Example**\n```\n// <http://example.com/foo>\n{\n   \"termType\": \"NamedNode\",\n   \"value\": \"http://example.com/foo\"\n}\n```",
            "properties": {
                "termType": {
                    "enum": [
                        "NamedNode"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "propertyOrder": [
                "termType",
                "value"
            ],
            "required": [
                "termType",
                "value"
            ],
            "type": "object"
        },
        "SparqlDataQuery": {
            "description": "Queries of this types are processed using SparqlClient the same way as ordinary SPARQL queries.",
            "properties": {
                "params": {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/BindSparqlParam"
                            },
                            {
                                "$ref": "#/definitions/TokenSparqlParam"
                            }
                        ]
                    },
                    "description": "Dictionary of input parameters where for each defined input variable\nthere is a corresponding definition.",
                    "propertyOrder": [
                    ],
                    "type": "object"
                },
                "query": {
                    "description": "SPARQL SELECT query.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of the query. Should be always `sparql` in order to be of a type SparqlQuery",
                    "enum": [
                        "sparql"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "query",
                "params"
            ],
            "required": [
                "query",
                "type"
            ],
            "type": "object"
        },
        "TokenSparqlParam": {
            "description": "Defines a token input parameters and tells whether it should be escaped and tokenized or not.\nAlso here it's possible to specify if the parameter is optional or not.\nIt's expected that token is always of `xsd:string` datatype.",
            "properties": {
                "escapeLuceneSyntax": {
                    "description": "Tells whether SparqlClient should escape the search string or not.\n\nDeprecated: escaping will be applied automatically based on SPARQL query.",
                    "type": "boolean"
                },
                "required": {
                    "description": "Tells whether the token is required parameter or not",
                    "type": "boolean"
                },
                "tokenizeLuceneQuery": {
                    "description": "Tells whether SparqlClient should tokenize lucene query or not.\n\nDeprecated: tokenization will be applied automatically based on SPARQL query.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Defines the type of parameter",
                    "enum": [
                        "token"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "required",
                "escapeLuceneSyntax",
                "tokenizeLuceneQuery"
            ],
            "required": [
                "type"
            ],
            "type": "object"
        },
        "VariableDefinition": {
            "properties": {
                "aliasId": {
                    "description": "Alias to map fetched column name to the name in VALUES clause.\nIf not set, the original id is used.",
                    "type": "string"
                },
                "fallback": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/NamedNodeData"
                        },
                        {
                            "$ref": "#/definitions/LiteralData"
                        }
                    ],
                    "description": "Fallback value to use in cases when the preliminary fetched results\ncontain no value for the specified column.\nThis parameter can also be used for creating artificial columns,\nwhich are not in the database or were not preliminary fetched."
                },
                "id": {
                    "description": "DataClient projection variable name.\n(Name of the associated column from the preliminary fetching results).",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "id",
                "aliasId",
                "fallback"
            ],
            "required": [
                "id"
            ],
            "type": "object"
        }
    },
    "properties": {
        "className": {
            "description": "Custom css classes for the input element",
            "type": "string"
        },
        "debounce": {
            "default": 300,
            "description": "Number of milliseconds to wait after the last keystroke before sending the query.",
            "type": "number"
        },
        "domain": {
            "description": "Specify search domain category IRI (full IRI enclosed in <>).\nRequired, if component is used together with facets.",
            "type": "string"
        },
        "minSearchTermLength": {
            "default": 3,
            "description": "Minimum number of input characters that triggers the search.",
            "type": "number"
        },
        "placeholder": {
            "description": "Input placeholder.",
            "type": "string"
        },
        "query": {
            "anyOf": [
                {
                    "$ref": "#/definitions/SparqlDataQuery"
                },
                {
                    "$ref": "#/definitions/LookupDataQuery"
                },
                {
                    "type": "string"
                }
            ],
            "description": "LookupDataQuery or SparqlDataQuery"
        },
        "searchTermVariable": {
            "default": "__token__",
            "description": "User input variable name.\nThis parameter can be changed only when you provided SparqlDataQuery\nas value to the query parameter.",
            "type": "string"
        },
        "style": {
            "$ref": "#/definitions/CSSProperties",
            "description": "Custom CSS styles for the input element"
        },
        "variableDefinitions": {
            "description": "Maps binding names to variables in the result VALUES clause.\nIf not defined, tries to provide all possible columns.",
            "items": {
                "$ref": "#/definitions/VariableDefinition"
            },
            "type": "array"
        }
    },
    "propertyOrder": [
        "query",
        "searchTermVariable",
        "variableDefinitions",
        "style",
        "className",
        "domain",
        "debounce",
        "minSearchTermLength",
        "placeholder"
    ],
    "required": [
        "query"
    ],
    "type": "object"
}

