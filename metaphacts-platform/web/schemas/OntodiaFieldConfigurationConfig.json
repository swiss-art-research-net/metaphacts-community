{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "FieldDefinitionConfig": {
            "properties": {
                "askPattern": {
                    "description": "Single constraint (SPARQL ASK query) to to validate values entered by\nthe user against the database.\n\nQuery bindings:\n   * `?value` - validated field value;\n\nIf both `askPattern` and `constraints` are specified then all of them will\nbe evaluated for each validated value.",
                    "type": "string"
                },
                "autosuggestionPattern": {
                    "description": "SPARQL SELECT query to generate a dynamic suggestion list based on\ntext index or regex search.\n\nQuery bindings:\n   * `?__token__` - text token the user is typing;\n\nExposed projection variables:\n   * `?value` - suggested value for the field;\n   * (optional) `?label` - label for `?value`; further projection variables might be exposed\n     to format the rendering within the input element;\n\nExample:\n```\nPREFIX lookup: <http://www.metaphacts.com/ontologies/platform/repository/lookup#>\nSELECT ?value ?label WHERE {\n   SERVICE Repository:lookup {\n     ?value lookup:token ?__token__ .\n     # ?value lookup:type :MyType\n   }\n}\n```",
                    "type": "string"
                },
                "categories": {
                    "description": "An unordered set of categories as additional metadata for improved organization.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "constraints": {
                    "description": "Constraints (SPARQL ASK queries) to validate values entered by\nthe user against the database.",
                    "items": {
                        "$ref": "#/definitions/SingleFieldConstraint"
                    },
                    "type": "array"
                },
                "defaultValues": {
                    "description": "An array of default values (represented as text) assigned to the field\nif subject doesn't contain a value for it.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "deletePattern": {
                    "description": "SPARQL DELETE query to remove previous value from the database\nbefore inserting a new one.\n\nQuery bindings:\n   * `?subject` - current entity to be created/edited;\n   * `?value` - inserted atomic values, connected to `?subject` through the graph pattern;",
                    "type": "string"
                },
                "description": {
                    "description": "Description of a field, might be rendered e.g. as a tooltip on hover or\nusing an info icon next to the field.",
                    "type": "string"
                },
                "domain": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Domain restriction on classes this field applicable to."
                },
                "id": {
                    "description": "Unique identifier of the field definition.\n\nIn most cases it will be the IRI of the field definition, but might be an alias as well.",
                    "type": "string"
                },
                "insertPattern": {
                    "description": "SPARQL INSERT query to add new value to the database.\n\nQuery bindings:\n   * `?subject` - current entity to be created/edited;\n   * `?value` - deleted atomic values, connected to `?subject` through the graph pattern;\n   * (optional) `?index` - see `orderedWith` property;",
                    "type": "string"
                },
                "iri": {
                    "description": "IRI of field definition.",
                    "type": "string"
                },
                "label": {
                    "description": "Label used to refer to field on form (e.g. in validation messages) and\nrendering the field, for example as an HTML input label before the input element.",
                    "type": "string"
                },
                "maxOccurs": {
                    "anyOf": [
                        {
                            "enum": [
                                "unbound"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "default": "'unbound'",
                    "description": "XSD schema max cardinality (inclusive) or `'unbound'` (i.e. infinite)."
                },
                "minOccurs": {
                    "anyOf": [
                        {
                            "enum": [
                                "unbound"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "default": "'unbound'",
                    "description": "XSD schema min cardinality (inclusive) or `'unbound'` (i.e. 0)."
                },
                "order": {
                    "description": "Number used for ordering field definitions.",
                    "type": "number"
                },
                "orderedWith": {
                    "description": "Enables values ordering. Supported value: `index-property`.\n\n`index-property` means that the `?index` variable in the query will bind a literal value\nof type `xsd:integer` representing the node's index.\n\nThe following conventions apply:\n   * `insertPattern` MUST have an `?index` variable to bind;\n   * `selectPattern` MUST expose an `?index` projection variable;\n   * `maxOccurs` MUST be > 1 or `'unbound'`;\n\nNote that the index must be bound as property to an object resource.\nFor ordering literal values consider adding an intermediate node, i.e.:\n```\n?subj :hasOrderedItem ?itemNode .\n?itemNode :hasItemValue ?value .\n?itemNode :hasIndex ?index .\n```",
                    "enum": [
                        "index-property"
                    ],
                    "type": "string"
                },
                "range": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Range restriction on allowed classes of objects for the field values.\nOnly applicable if `xsdDatatype` is `xsd:anyURI`."
                },
                "selectPattern": {
                    "description": "SPARQL SELECT query string to read initial values for the field.\n\nQuery bindings:\n   * `?subject` - current entity to be created/edited;\n\nExposed projection variables:\n   * `?value` - current atomic values, connected to `?subject` through the graph pattern;\n   * (optional) `?label` - label for `?value`; further projection variables might be exposed\n     to format the rendering within the input element;\n   * (optional) `?index` - see `orderedWith` property;",
                    "type": "string"
                },
                "treePatterns": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/SimpleTreeConfig"
                        },
                        {
                            "$ref": "#/definitions/FullTreeConfig"
                        }
                    ],
                    "description": "SPARQL configuration to select terms from an hierarchical thesaurus.\nCan be either `simple` or `full` (specified in the `type` attribute)."
                },
                "valueSetPattern": {
                    "description": "SPARQL SELECT query to generate a fixed list (choices) of values\nthat the user may choose from.\n\nExposed projection variables:\n   * `?value` - set of values for user to choose from;\n   * (optional) `?label` - label for `?value`;\n   * (optional) further projection variables might be exposed\n     to format the rendering within the input element;",
                    "type": "string"
                },
                "xsdDatatype": {
                    "description": "A full or prefix XSD IRI datatype identifier as specified\nin [RDF 1.1](https://www.w3.org/TR/rdf11-concepts/#xsd-datatypes)",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "id",
                "iri",
                "label",
                "description",
                "categories",
                "domain",
                "xsdDatatype",
                "range",
                "minOccurs",
                "maxOccurs",
                "order",
                "defaultValues",
                "selectPattern",
                "deletePattern",
                "insertPattern",
                "askPattern",
                "constraints",
                "valueSetPattern",
                "autosuggestionPattern",
                "treePatterns",
                "testSubject",
                "orderedWith"
            ],
            "required": [
                "id"
            ],
            "type": "object"
        },
        "FormBasedPersistenceProps": {
            "properties": {
                "debug": {
                    "type": "boolean"
                },
                "type": {
                    "enum": [
                        "form"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "debug"
            ],
            "required": [
                "type"
            ],
            "type": "object"
        },
        "FullTreeConfig": {
            "properties": {
                "childrenQuery": {
                    "description": "Children SPARQL query with `[?parent]` input and `[?item, ?label, ?hasChildren]` output\nvariables:\n  - `?parent` - parametrized variable with node IRI to retrieve children for;\n  - `?item` - result child node IRI;\n  - `?label` (optional) - display label for `?item` (if not provided the display label is\n    retrieved using the label service);\n  - `?hasChildren` (optional) - pre-computed flag to visually indicate that the `?item` node\n    does not have children without expanding it;\n\nBe aware to have a distinct association of node and label to not produce any cross products.\n\nIf the order is not explicitly defined in the query using `ORDER BY`, the result is sorted\nby the display value.",
                    "type": "string"
                },
                "escapeLuceneSyntax": {
                    "description": "A flag determining whether any special Lucene syntax will be escaped.\nWhen `false` lucene syntax in the user input is not escaped.\n\nDeprecated: escaping will be applied automatically based on SPARQL query.",
                    "type": "boolean"
                },
                "parentsQuery": {
                    "description": "A SPARQL query to recursively compute the parent hierarchy for search results.\nCan be used together with the `search-query` setting.\n\nThe query has `[?item]` inputs through `VALUES(...)` clause\nand `[?item, ?parent, ?parentLabel]` outputs:\n  - `?item` - child node IRI provided with `VALUES(?item) { ... }` clause;\n  - `?parent` - result parent node IRI for `?item` node;\n  - `?parentLabel` (optional) - display label for `?parent` (if not provided the display label\n    is retrieved using the label service);\n\nBe aware to have a distinct association of node and label to not produce any cross products.",
                    "type": "string"
                },
                "rootsQuery": {
                    "description": "Tree roots SPARQL query with no input and `[?item, ?label, ?hasChildren]` output variables:\n  - `?item` - result root node IRI;\n  - `?label` (optional) - display label for `?item` (if not provided the display label is\n    retrieved using the label service);\n  - `?hasChildren` (optional) - pre-computed flag to visually indicate that the `?item` node\n    does not have children without expanding it;\n\nBe aware to have a distinct association of node and label to not produce any cross products.\n\nIf the order is not explicitly defined in the query using `ORDER BY`, the result is sorted\nby the display label.",
                    "type": "string"
                },
                "searchQuery": {
                    "description": "A SPARQL query to compute a search result for a given user input.\n\nThe query has `[?__token__]` input and `[?item, ?score, ?label, ?hasChildren]` outputs:\n  - `?__token__` - parametrized search input string;\n  - `?item` - search result node IRI;\n  - `?score` (optional) - search result score of `?item` for tree sorting;\n  - `?label` (optional) - display label for `?item` (if not provided the display label is\n    retrieved using the label service);\n  - `?hasChildren` (optional) - pre-computed flag to visually indicate that the `?item` node\n    does not have children without expanding it;\n\nBe aware to have a distinct association of node and label to not produce any cross products.\n\nNote that the parent hierarchy is computed recursively using the `parents-query` configuration\nsetting.",
                    "type": "string"
                },
                "tokenizeLuceneQuery": {
                    "description": "A flag determining whether the user input is tokenized by whitespace into words postfixed\nby `*`. E.g. the search for `Hello World` becomes `Hello* World*`.\n\nDeprecated: tokenization will be applied automatically based on SPARQL query.",
                    "type": "boolean"
                },
                "type": {
                    "enum": [
                        "full"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "escapeLuceneSyntax",
                "tokenizeLuceneQuery",
                "rootsQuery",
                "childrenQuery",
                "parentsQuery",
                "searchQuery"
            ],
            "required": [
                "childrenQuery",
                "rootsQuery",
                "type"
            ],
            "type": "object"
        },
        "OntologyPersistenceProps": {
            "properties": {
                "repository": {
                    "type": "string"
                },
                "targetGraphIri": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "ontology"
                    ],
                    "type": "string"
                },
                "typePattern": {
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "targetGraphIri",
                "repository",
                "typePattern"
            ],
            "required": [
                "repository",
                "targetGraphIri",
                "type"
            ],
            "type": "object"
        },
        "SimpleTreeConfig": {
            "properties": {
                "relationPattern": {
                    "description": "Output bindings: `?item`, `?parent`",
                    "type": "string"
                },
                "scheme": {
                    "description": "Binds to `?__scheme__` variable in the `schemePattern`",
                    "type": "string"
                },
                "schemePattern": {
                    "description": "Input bindings: `?__scheme__`\nOutput bindings: `?item`",
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "simple"
                    ],
                    "type": "string"
                }
            },
            "propertyOrder": [
                "type",
                "scheme",
                "schemePattern",
                "relationPattern"
            ],
            "required": [
                "type"
            ],
            "type": "object"
        },
        "SingleFieldConstraint": {
            "properties": {
                "message": {
                    "description": "Error message to display if constraint is violated.",
                    "type": "string"
                },
                "validatePattern": {
                    "description": "SPARQL ASK pattern to validate if the constraint holds.\n\nQuery bindings:\n   * `?value` - validated field value;",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "validatePattern",
                "message"
            ],
            "required": [
                "message",
                "validatePattern"
            ],
            "type": "object"
        }
    },
    "properties": {
        "allowRequestFields": {
            "default": true,
            "description": "Allows to fetch field definitions from the backend API.",
            "type": "boolean"
        },
        "authoringMode": {
            "description": "Switches Ontodia to authoring mode.\n\nAuthoring mode requires entity metadata to be specified (using semantic forms as children)\nin order to work.",
            "type": "boolean"
        },
        "children": {
            "additionalProperties": true,
            "description": "Children can be either ontodia-entity-metadata or ontodia-field-input-override",
            "properties": {
            },
            "type": "object"
        },
        "debug": {
            "default": false,
            "description": "Renders debug info into DOM when placed as stand-alone component and also to the console.",
            "type": "boolean"
        },
        "defaultImageIri": {
            "description": "Default field to be used for entity image",
            "type": "string"
        },
        "defaultLabelIri": {
            "description": "Default field to be used for entity label",
            "type": "string"
        },
        "defaultSubjectTemplate": {
            "description": "Default template to create Iri for new entities.",
            "type": "string"
        },
        "fields": {
            "description": "Fields to be used in Ontodia instance. Could be populated inline or with backend helper.",
            "items": {
                "$ref": "#/definitions/FieldDefinitionConfig"
            },
            "type": "array"
        },
        "forceDatatypeFields": {
            "description": "Forces certain fields of xsd:anyUri datatype to be treated as entity properties\nto be modified inside entity form instead of object properties treated and modified\nas an edge in the graph, like entity image Iri, or some vocabulary reference.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "persistence": {
            "anyOf": [
                {
                    "$ref": "#/definitions/OntologyPersistenceProps"
                },
                {
                    "$ref": "#/definitions/FormBasedPersistenceProps"
                }
            ],
            "default": "{type: \"form\"}",
            "description": "Defines persistence mode to use in authoring mode."
        },
        "typeIri": {
            "description": "Field that is used for entity type. In most cases field should use rdf:type as a property.",
            "type": "string"
        }
    },
    "propertyOrder": [
        "fields",
        "children",
        "authoringMode",
        "persistence",
        "allowRequestFields",
        "typeIri",
        "defaultLabelIri",
        "defaultImageIri",
        "defaultSubjectTemplate",
        "forceDatatypeFields",
        "debug"
    ],
    "required": [
        "children",
        "typeIri"
    ],
    "type": "object"
}

