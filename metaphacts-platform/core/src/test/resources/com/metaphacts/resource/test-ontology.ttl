@prefix dcterms:  <http://purl.org/dc/terms/> .
@prefix rdf:      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:     <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dc:       <http://purl.org/dc/elements/1.1/> .
@prefix sh:       <http://www.w3.org/ns/shacl#> .
@prefix dash:     <http://datashapes.org/dash#> .
@prefix xsd:      <http://www.w3.org/2001/XMLSchema#> .
@prefix owl:      <http://www.w3.org/2002/07/owl#> .
@prefix foaf:     <http://xmlns.com/foaf/0.1/> .
@prefix ex:       <http://example.org/> .
@prefix Platform: <http://www.metaphacts.com/ontologies/platform#> .


ex:Person_Test_Ontology a owl:Ontology ;
    rdfs:label "Person Test Ontology" .

ex:Person a owl:Class ;
    rdfs:label "Person"@en, "Person"@de .

ex:dateOfBirth a owl:DatatypeProperty ;
    rdfs:domain ex:Person .

ex:dateOfDeath a owl:DatatypeProperty ;
    rdfs:domain ex:Person .

ex:occupation a owl:DatatypeProperty ;
    rdfs:domain ex:Person .

ex:hasHobby a owl:DatatypeProperty ;
    rdfs:domain ex:Person .

ex:placeOfBirth a owl:ObjectProperty ;
    rdfs:domain ex:Person .

ex:placeOfDeath a owl:ObjectProperty ;
    rdfs:domain ex:Person .

ex:hasPreferredIcecreamFlavor a owl:DatatypeProperty ;
    rdfs:domain ex:Person .

ex:belongsTo a owl:ObjectProperty ;
    rdfs:domain ex:Project .

ex:Employee a owl:Class ;
    rdfs:subClassOf ex:Person ; 
    rdfs:label "Employee"@en, "Angestelle(r)"@de .

ex:hasProject a owl:ObjectProperty ;
    rdfs:domain ex:Employee .

ex:worksFor a owl:ObjectProperty ;
    rdfs:domain ex:Employee .

ex:Manager a owl:Class ;
    rdfs:subClassOf ex:Employee ; 
    rdfs:label "Manager"@en, "Manager"@de .

ex:hasTeamMember a owl:ObjectProperty ;
    rdfs:domain ex:Manager .

ex:PersonShape
    a sh:NodeShape ;
    sh:targetClass ex:Person ;
    sh:property [
        sh:path rdfs:label ;
        Platform:projectionVariableName "name" ;
        dash:propertyRole dash:LabelRole ;
    ], [
        sh:path ex:dateOfBirth ;
        sh:datatype xsd:date ;
        Platform:projectionVariableName "dateOfBirth" ;
        dash:propertyRole dash:DescriptionRole ;
    ], [
        sh:path ex:dateOfDeath ;
        sh:datatype xsd:date ;
        Platform:projectionVariableName "dateOfDeath" ;
        dash:propertyRole dash:DescriptionRole ;
        sh:datatype xsd:date ;
    ], [
        sh:path ex:occupation ;
        sh:datatype xsd:string ;
        Platform:projectionVariableName "occupation" ;
        dash:propertyRole dash:DescriptionRole, 
                          dash:KeyInfoRole ;
    ], [
        # invalid projection variable
        sh:path ex:hasHobby ;
        sh:datatype xsd:string ;
        Platform:projectionVariableName "has hobby" ;
    ], [
        sh:path ex:placeOfBirth ;
        Platform:projectionVariableName "placeOfBirth" ;
        dash:propertyRole dash:DescriptionRole ;
    ], [
        sh:path ex:marriedTo ;
        sh:class ex:Person ;
        Platform:projectionVariableName "marriedTo" ;
        dash:propertyRole dash:DescriptionRole ;
    ], [
        # no projection variable
        sh:path ex:placeOfDeath ;
    ], [
        # projection variable which differs from local name of corresponding property
        sh:path ex:hasPreferredIcecreamFlavor ;
        Platform:projectionVariableName "preferredIcecreamFlavor" ;
        sh:datatype xsd:string ;
    ] .

# SHACL implicit target class, i.e. the same resourcve is both an 
# OWL Class as well as a SHACL NodeShape
# see https://www.w3.org/TR/shacl/#implicit-targetClass
ex:Project a owl:Class ;
    rdfs:label "Project"@en, "Projekt"@de ;
    a sh:NodeShape ;
    sh:property [
        sh:path ex:belongsTo ;
        sh:class foaf:Organization ;
        Platform:projectionVariableName "belongsTo" ;
        dash:propertyRole dash:DescriptionRole ;
    ], [
        sh:path rdfs:label ;
        dash:propertyRole dash:DescriptionRole ;
    ] .

# this shape should implicitly include all properties from the parent class
ex:EmployeeShape
    a sh:NodeShape ;
    sh:targetClass ex:Employee ;
    sh:property [
        sh:path ex:hasProject ;
        sh:class ex:Project ;
    ], [
        sh:path ex:worksFor ;
        sh:class foaf:Organization ;
    ] .

# this shape should implicitly include all properties from the parent classes
ex:ManagerShape
    a sh:NodeShape ;
    sh:targetClass ex:Manager ;
    sh:property [
        sh:path ex:hasTeamMember ;
        sh:class ex:Employee ;
    ] .