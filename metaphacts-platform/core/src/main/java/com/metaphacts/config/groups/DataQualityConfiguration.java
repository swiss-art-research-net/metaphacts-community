/*
 * "Commons Clause" License Condition v1.0
 *
 * The Software is provided to you by the Licensor under the
 * License, as defined below, subject to the following condition.
 *
 * Without limiting other conditions in the License, the grant
 * of rights under the License will not include, and the
 * License does not grant to you, the right to Sell the Software.
 *
 * For purposes of the foregoing, "Sell" means practicing any
 * or all of the rights granted to you under the License to
 * provide to third parties, for a fee or other consideration
 * (including without limitation fees for hosting or
 * consulting/ support services related to the Software), a
 * product or service whose value derives, entirely or substantially,
 * from the functionality of the Software. Any
 * license notice or attribution required by the License must
 * also include this Commons Clause License Condition notice.
 *
 * License: LGPL 2.1 or later
 * Licensor: metaphacts GmbH
 *
 * Copyright (C) 2015-2021, metaphacts GmbH
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, you can receive a copy
 * of the GNU Lesser General Public License from http://www.gnu.org/
 */
package com.metaphacts.config.groups;

import javax.inject.Inject;

import com.metaphacts.config.ConfigurationParameter;
import com.metaphacts.config.ConfigurationParameter.VisibilityLevel;
import com.metaphacts.config.InvalidConfigurationException;
import com.metaphacts.services.storage.api.PlatformStorage;

public class DataQualityConfiguration extends ConfigurationGroupBase {

    private static final String ID = "dataQuality";
    private static final String DESCRIPTION =
            "Configuration options that affect execution of data quality checks.";

    @Inject
    public DataQualityConfiguration(PlatformStorage platformStorage) throws InvalidConfigurationException {
        super(ID, DESCRIPTION, platformStorage);
    }
    
    /**
     * Type of SHACL engine to be used.
     * 
     * @default rdfunit
     */
    @ConfigurationParameter(name = "shaclEngine", restartRequired = true, desc = "Type of SHACL engine to be used. Supported engines: rdfunit, stardog, graphdb. Default: rdfunit.", visibilityLevel = VisibilityLevel.advanced)
    public String getShaclEngine() {
        return getString("shaclEngine", "rdfunit");
    }
    
    /**
     * Query delay in ms between SPARQL requests send by data quality engine.
     * 
     * @default 0
     */
    @ConfigurationParameter(name = "queryDelay", restartRequired = true, desc = "Query delay in ms between SPARQL requests sent by data quality engine. "
            + "Default 0.")
    public Integer getQueryDelay() {
        return getInteger("queryDelay", 0);
    }
    
    /**
     * The query limit in seconds applied to all SPARQL queries sent/generated by
     * the data quality engine. Default 100s.
     */
    @ConfigurationParameter(name = "queryLimit", restartRequired = true, desc = "The query limit in seconds applied to all SPARQL queries sent/generated by "
            + " the data quality engine. Default 100.")
    public Integer getQueryLimit() {
        return getInteger("queryLimit", 100);
    }
    
    /**
     * If violation results need to be requested page by page (applies LIMIT ... OFFSET  ..),
     * this number specifies size of the pages.
     * 
     * @default 0
     */
    @ConfigurationParameter(name = "pagination", desc = "Size of pages in case violation result are requested page by page.", restartRequired = true)
    public Integer getPagination() {
        return getInteger("pagination", 0);
    }
    
    @Override
    public void assertConsistency() {

    }
}
